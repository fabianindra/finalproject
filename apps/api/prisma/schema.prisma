generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Property {
  id                Int      @id @default(autoincrement())
  name              String
  address           String
  city_name         String
  province_name     String
  category_property String
  room_count        Int
  image             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenant_id         Int
  tenant            Tenant   @relation(fields: [tenant_id], references: [id], map: "Property_tenant_id_fkey")
  review            Review[]
  room              Room[]

  @@index([tenant_id], map: "Property_tenant_id_fkey")
}

model Review {
  id          Int      @id @default(autoincrement())
  star        Int
  feed_back   String
  createdAt   DateTime @default(now())
  uupdatedAt  DateTime @updatedAt
  property_id Int
  property    Property @relation(fields: [property_id], references: [id], map: "Review_property_id_fkey")

  @@index([property_id], map: "Review_property_id_fkey")
}

model Room {
  id               Int                @id @default(autoincrement())
  name             String
  price            Int
  weekend_price    Int
  capacity_person  Int
  capacity_room    Int
  room_size        String
  image            String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime @updatedAt
  property_id      Int
  property         Property           @relation(fields: [property_id], references: [id], map: "Room_property_id_fkey")
  roomavailability RoomAvailability[]
  specialprice     SpecialPrice[]
  transaction      Transaction[]

  @@index([property_id], map: "Room_property_id_fkey")
}

model RoomAvailability {
  id         Int      @id @default(autoincrement())
  start_date DateTime
  end_date   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  room_id    Int
  room       Room     @relation(fields: [room_id], references: [id], map: "RoomAvailability_room_id_fkey")

  @@index([room_id], map: "RoomAvailability_room_id_fkey")
}

model SpecialPrice {
  id            Int      @id @default(autoincrement())
  start_date    DateTime
  end_date      DateTime
  special_price Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  room_id       Int
  room          Room     @relation(fields: [room_id], references: [id], map: "SpecialPrice_room_id_fkey")

  @@index([room_id], map: "SpecialPrice_room_id_fkey")
}

model Tenant {
  id        Int        @id @default(autoincrement())
  email     String     @unique(map: "Tenant_email_key")
  password  String
  username  String     @unique(map: "Tenant_username_key")
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime @updatedAt
  property  Property[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  total_price Int
  total_room  Int
  check_in    DateTime
  check_out   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room_id     Int
  user_id     Int
  room        Room     @relation(fields: [room_id], references: [id], map: "Transaction_room_id_fkey")
  user        User     @relation(fields: [user_id], references: [id], map: "Transaction_user_id_fkey")

  @@index([room_id], map: "Transaction_room_id_fkey")
  @@index([user_id], map: "Transaction_user_id_fkey")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique(map: "User_email_key")
  password    String
  username    String        @unique(map: "User_username_key")
  verified    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  brithday    String?
  foto        String?
  gender      String?
  transaction Transaction[]
}
